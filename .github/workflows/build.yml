name: PROD - Build

on:
  push:
    branches: [ main ]

env:
  run_id: PROD-portal-${{ github.run_id }}

jobs:
  
  build:
    runs-on: ubuntu-latest
    environment: Prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push the Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd simple-demo-app
          docker build -t $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:${{ env.run_id }} .
          docker push $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:${{ env.run_id }}
          echo ::set-output name=image::$ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:$IMAGE_TAG

      - name: Install jq cli tool
        run: sudo apt-get install jq

      - name: Download Dockerrun.aws.jsonm
        run: aws s3 cp s3://${{ vars.S3_BUCKET }}/Dockerrun.aws.json .

      - name: Update Dockerrun.aws.json file with docker image url
        run: |
          jq '.containerDefinitions[1].image="${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ env.run_id }}"' Dockerrun.aws.json > Dockerrun.aws.updated.json
          mv Dockerrun.aws.updated.json Dockerrun.aws.json
          cat Dockerrun.aws.json

      - name: Push updated Dockerrun.aws.json file with corresponding zip file
        run: |
          zip Dockerrun.zip Dockerrun.aws.json
          aws s3 cp Dockerrun.aws.json s3://${{ vars.S3_BUCKET }}
          aws s3 cp Dockerrun.zip s3://${{ vars.S3_BUCKET }}
